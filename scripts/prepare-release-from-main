#!/usr/bin/env node

const os = require('node:os')
const path = require('node:path')
const fsp = require('node:fs').promises

const execTools = require('../lib/exec')
const {sleep} = require("../lib/utils");

const branchName = process.argv[2] && process.argv[2] !== '--dry-run' ? process.argv[2] : 'main'

const isDryRun = process.argv.includes('--dry-run')

const wait = time => new Promise((resolve) => setTimeout(resolve, time))

;(async () => {
  const tmpDir = await mkTmpDir()
  console.log('tmpDir:', tmpDir)
  const kitDir = path.join(tmpDir, 'govuk')
  await exec('git clone git@github.com:nowprototypeit/govuk.git', {
    cwd: tmpDir
  })
  await exec(`git checkout ${branchName}`, {
    cwd: kitDir
  })
  await checkForUnpublishedDependencies(kitDir)
  await exec(`git checkout -b release-prep-${Date.now()}`, {
    cwd: kitDir
  })
  await exec('npm install', {
    cwd: kitDir
  })
  await exec('npm run lint', {
    cwd: kitDir
  })
  await exec('npm run build:destructive', {
    cwd: kitDir
  })
  await exec('git add -A .', {
    cwd: kitDir
  })
  await exec('git commit -am "Destructively built ready for release"', {
    cwd: kitDir
  })
  const result = await execAndCaptureStdout('npm pack', {
    cwd: kitDir
  })
  const dependency = path.join(kitDir, result)
  console.log('dependency:', dependency)
  await runBrowserTests(dependency)
  await updateChangelogAndPublish(kitDir)
})()

async function mkTmpDir () {
  const tmpDir = path.join(os.tmpdir(), 'now-prototype-it', 'release', '' + Date.now())
  await fsp.mkdir(tmpDir, { recursive: true })
  return tmpDir
}

async function execAndCaptureStdout (command, options) {
  let stdout = ''
  await exec(command, {
    ...options,
    stdoutHandlers: {
      data: (data) => {
        stdout += data.toString()
      }
    }
  })
  return stdout.trim()
}

async function execWithStdio (command, options) {
  await exec(command, {
    ...options,
    stdio: 'inherit'
  })
}

async function execAndPrintStdout (command, options) {
  await exec(command, options, (data) => {
    process.stdout.write(data.toString())
  }, (data) => {
    process.stderr.write(data.toString())
  })
}

async function exec (command, options) {
  console.log('running command:', command)
  const result = execTools.execv2(command, {
    passThroughEnv: true,
    ...options
  })
  await result.finishedPromise
}

async function runBrowserTests (dependency) {
  await exec('npm run test:browser:all -- --retry=2', {
    env: {
      ...process.env,
      TEST_KIT_DEPENDENCY: dependency,
      SHOW_BROWSER: 'true'
    },
    cwd: path.join(__dirname, '..')
  })
}

function findIndexOfFirstMatchingLine (changelogLines, regExp) {
  return changelogLines
    .map((x, index) => x.match(regExp) ? index : undefined)
    .filter(x => x !== undefined)
    .at(0)
}

async function updateChangelogAndPublish (kitDir) {
  const changelogPath = path.join(kitDir, 'CHANGELOG.md')
  const standardExecOptions = { cwd: kitDir }
  try {
    await fsp.access(changelogPath)
  } catch (e) {
    console.error(`The directory provided does not include a changelog.  Directory was [${kitDir}]`)
    process.exit(12)
  }

  const changelogLines = (await fsp.readFile(changelogPath, 'utf8')).split('\n')

  const unreleasedLineIndex = findIndexOfFirstMatchingLine(changelogLines, /^#+\s+Unreleased\s*$/i)
  const previousReleaseLineIndex = findIndexOfFirstMatchingLine(changelogLines, /^#+\s+\d+\.\d+\.\d+\s*$/i)
  const firstFixes = findIndexOfFirstMatchingLine(changelogLines, /^#+\s+Fixes\s*$/i)
  const firstNewFeatures = findIndexOfFirstMatchingLine(changelogLines, /^#+\s+New Features\s*$/i)
  const firstBreakingChanges = findIndexOfFirstMatchingLine(changelogLines, /^#+\s+Breaking changes\s*$/i)

  let releaseType

  if (firstBreakingChanges > unreleasedLineIndex && firstBreakingChanges < previousReleaseLineIndex) {
    releaseType = 'major'
  } else if (firstNewFeatures > unreleasedLineIndex && firstNewFeatures < previousReleaseLineIndex) {
    releaseType = 'minor'
  } else if (firstFixes > unreleasedLineIndex && firstFixes < previousReleaseLineIndex) {
    releaseType = 'patch'
  }

  if (!releaseType) {
    console.error('No changes were detected, cannot continue with release.')
    process.exit(13)
  }

  const command = `npm --no-git-tag-version version ${releaseType}`
  const newVersion = await execAndCaptureStdout(command, standardExecOptions).then(stdout => stdout.split('v')[1].trim())

  console.log('new version', newVersion)

  const newChangelogLines = [].concat(changelogLines)
  newChangelogLines.splice(unreleasedLineIndex + 1, 0, '', `## ${newVersion}`)

  await fsp.writeFile(changelogPath, newChangelogLines.join('\n'))

  const partialChangelog = changelogLines
    .slice(unreleasedLineIndex + 1, previousReleaseLineIndex - 1)
    .filter((value, index, arr) => {
      if (value !== '') {
        return true
      }
      if (arr[index + 1].startsWith('#') || (index > 0 && arr[index - 1].startsWith('#'))) {
        return true
      }
      return false
    })

  const branchName = `release-${newVersion}`

  await execAndPrintStdout(`git checkout -b ${branchName}`, standardExecOptions)

  await execAndPrintStdout(`git commit -am "Preparing for release ${newVersion}."`, standardExecOptions)

  if (isDryRun) {
    console.log('Dry run, skipping push and release.')
    return
  }

  await execAndPrintStdout(`git push -u origin ${branchName}`, standardExecOptions)

  const prBodyFile = path.join(kitDir, '..', '.git-pr-body')
  await fsp.writeFile(prBodyFile, partialChangelog.join('\n'))

  let loggedInAsCorrectNpmUser = false
  const correctNpmUser = 'nowprototypeit'

  do {
    await wait(2000)
    const output = await execAndCaptureStdout('npm whoami', { allowStderr: true, allowErrorCode: true, hideStd: true })
    if ((output || '').trim() === correctNpmUser) {
      loggedInAsCorrectNpmUser = true
    } else if (output) {
      console.log(`Currently logged in as [${output}], should be logged in as [${correctNpmUser}].  Run [npm login] in another terminal.`)
    } else {
      console.log(`Please log in as [${correctNpmUser}] to continue by running [npm login] in another terminal.`)
    }
  } while (!loggedInAsCorrectNpmUser)

  await execWithStdio('npm publish', standardExecOptions)

  await execAndPrintStdout({
    command: 'gh',
    args: ['release', 'create', `v${newVersion}`, '--notes-file', prBodyFile, '--target', branchName, '--title', `v${newVersion}`, '--latest']
  }, standardExecOptions)

  await sleep(2000)

  await exec(`git checkout main`, standardExecOptions)
  await exec(`git checkout -b post-${branchName}`, standardExecOptions)
  await exec(`git cherry-pick ${branchName}`, standardExecOptions)
  await exec(`git push -u origin post-${branchName}`, standardExecOptions)

  await sleep(2000)

  await execAndPrintStdout({
    command: 'gh',
    args: ['pr', 'create', '--base', 'main', '--head', `post-${branchName}`, '--title', `Post release ${newVersion}.`, '--body', 'Post release PR.']
  })
}

async function checkForUnpublishedDependencies (kitDir) {
  const packageJson = JSON.parse(await fsp.readFile(path.join(kitDir, 'package.json'), 'utf8'))
  const dependencies = Object.assign({}, packageJson.devDependencies, packageJson.dependencies)
  const unpublishedDependencies = Object.keys(dependencies)
    .filter(x => dependencies[x].startsWith('file:') || dependencies[x].startsWith('github:'))
    .map(x => x + ' -> ' + dependencies[x])
  if (unpublishedDependencies.length > 0) {
    console.error('Unpublished dependencies detected, cancelling release.', unpublishedDependencies)
    process.exit(11)
  }
  console.log('No unpublished dependencies detected, continuing.')
}
