#!/usr/bin/env node

const os = require('node:os')
const path = require('node:path')
const fsp = require('node:fs').promises
const tar = require('tar')

const execTools = require('../lib/exec')
const { sleep } = require('../lib/utils')
const argvParser = require('../bin/utils/argv-parser')

const argv = argvParser.parse(process.argv, {
  booleans: ['dry-run', 'release-candidate', 'skip-tests', 'skip-changelog-check', 'use-https-for-git']
})

console.log('argv', argv)

const branch = argv.options.branch ?? 'main'
const isRc = argv.options['release-candidate']
const isDryRun = argv.options['dry-run']
const skipTests = argv.options['skip-tests']
const skipChangelogCheck = argv.options['skip-changelog-check']
const useHttpsForGit = argv.options['use-https-for-git']

if (branch !== 'main' && !isRc) {
  console.error('The branch name must be main unless this is a release candidate (--release-candidate).')
  process.exit(2)
}

if (skipTests && !isRc) {
  console.error('The --skip-tests option is only available for release candidates.')
  process.exit(2)
}

if (skipChangelogCheck && !isDryRun) {
  console.error('The --skip-changelog-check option is only available for dry runs.')
  process.exit(2)
}

if (useHttpsForGit && (!isDryRun || !skipChangelogCheck)) {
  console.error('The --use-https-for-git option is only available for dry runs with --skip-changelog-check.')
  process.exit(2)
}

(async () => {
  console.log(`${isDryRun ? 'DRY RUN: ' : ''}Releasing from [${branch}] branch${isRc ? ' as release candidate' : ''}.`)

  const tmpDir = await mkTmpDir()
  console.log('tmpDir:', tmpDir)
  const kitDir = path.join(tmpDir, 'nowprototypeit')

  function execInKitDir (command) {
    console.log('execInKitDir', command, kitDir)
    return exec(command, {
      cwd: kitDir
    })
  }

  const gitClonableStr = useHttpsForGit ? 'https://github.com/nowprototypeit/nowprototypeit' : 'git@github.com:nowprototypeit/nowprototypeit.git'
  await exec('git clone ' + gitClonableStr, { cwd: tmpDir })
  await execInKitDir(`git checkout ${branch}`)
  await checkForUnpublishedDependencies(kitDir)
  await checkForCorrectVersion(kitDir)
  await execInKitDir(`git checkout -b release-prep-${Date.now()}`)
  await execInKitDir('npm install')
  await execInKitDir('npm run lint')
  await execInKitDir('npm run build:destructive')
  await execInKitDir('git add -A .')
  await execInKitDir('git commit -am "Destructively built ready for release"')
  const result = await execAndCaptureStdout('npm pack', {
    cwd: kitDir
  })
  const dependency = path.join(kitDir, result)
  await assertCoreFilesExist(dependency, kitDir)
  console.log('dependency:', dependency)
  if (!skipTests) {
    await runBrowserTests(dependency, kitDir)
  }
  if (!(isDryRun && skipChangelogCheck)) {
    await updateChangelogAndPublish(kitDir)
  } else {
    console.log('Skipping changelog update and publish due to dry run or skip-changelog-check option.')
  }
})()

async function mkTmpDir () {
  const tmpDir = path.join(os.tmpdir(), 'now-prototype-it', 'release', '' + Date.now())
  await fsp.mkdir(tmpDir, { recursive: true })
  return tmpDir
}

async function execAndCaptureStdout (command, options) {
  let stdout = ''
  await exec(command, {
    ...options,
    stdoutHandlers: {
      data: (data) => {
        stdout += data.toString()
      }
    }
  })
  return stdout.trim()
}

async function execWithStdio (command, options) {
  await exec(command, {
    ...options,
    stdio: 'inherit'
  })
}

async function execAndPrintStdout (command, options) {
  await exec(command, options, (data) => {
    process.stdout.write(data.toString())
  }, (data) => {
    process.stderr.write(data.toString())
  })
}

async function exec (command, options) {
  console.log('running command:', command)
  const result = execTools.execv2(command, {
    passThroughEnv: true,
    ...options
  })
  await result.finishedPromise
}

async function assertCoreFilesExist (dependency, kitDir) {
  const getEntryFilenamesSync = tarballFilename => { // Based on an example from https://www.npmjs.com/package/tar
    const expectedRootDir = 'package/'
    const filenames = []
    tar.t({
      file: tarballFilename,
      onReadEntry: entry => {
        if (entry.path.startsWith(expectedRootDir)) {
          filenames.push(entry.path.slice(expectedRootDir.length))
        } else {
          throw new Error('Unexpected path outside root directory: ' + entry.path)
        }
      },
      sync: true
    })
    return filenames
  }
  const expectedFiles = [
    'CHANGELOG.md',
    'README.md',
    'LICENCE.txt',
    'package.json',
    'npm-shrinkwrap.json',
    'now-prototype-it.config.json'
  ]
  const filesListedInPackageJson = JSON.parse(await fsp.readFile(path.join(kitDir, 'package.json'), 'utf8')).files
  const tarContents = getEntryFilenamesSync(dependency)
  const missingExpectedFiles = expectedFiles.filter(file => !tarContents.includes(file))
  const listedInPackageJsonButMissingInTar = (filesListedInPackageJson || []).filter(file => file.endsWith('/') ? !tarContents.some(x => x.startsWith(file)) : !tarContents.includes(file))
  if (missingExpectedFiles.length > 0 || listedInPackageJsonButMissingInTar.length > 0) {
    console.error('The following expected core files were not found in the package tar:', missingExpectedFiles)
    console.error('The following files listed in package.json "files" array were not found in the tar:', listedInPackageJsonButMissingInTar)
    throw new Error('Required files are missing from the package tar.')
  }
  if (!filesListedInPackageJson || !Array.isArray(filesListedInPackageJson) || filesListedInPackageJson.length === 0) {
    throw new Error(`The package.json "files" array is missing, not an array or empty [${JSON.stringify(filesListedInPackageJson ?? 'undefined')}].`)
  }
  console.log('All listed files exist in the tar')
}

async function runBrowserTests (dependency, kitDir) {
  await exec('npm run test:browser:all -- --retry=2', {
    env: {
      ...process.env,
      TEST_KIT_DEPENDENCY: dependency,
      SHOW_BROWSER: 'true',
      TAKE_SCREENSHOT_AFTER_FAILURE: true,
      SCREENSHOT_DIR: path.join(__dirname, '..', '..', 'release-test-screenshots')
    },
    cwd: kitDir
  })
}

function findIndexOfFirstMatchingLine (changelogLines, regExp) {
  return changelogLines
    .map((x, index) => x.match(regExp) ? index : undefined)
    .filter(x => x !== undefined)
    .at(0)
}

async function updateChangelogAndPublish (kitDir) {
  const changelogPath = path.join(kitDir, 'CHANGELOG.md')
  const standardExecOptions = { cwd: kitDir }
  try {
    await fsp.access(changelogPath)
  } catch (e) {
    console.error(`The directory provided does not include a changelog.  Directory was [${kitDir}]`)
    process.exit(12)
  }

  const changelogLines = (await fsp.readFile(changelogPath, 'utf8')).split('\n')

  const unreleasedLineIndex = findIndexOfFirstMatchingLine(changelogLines, /^#+\s+Unreleased\s*$/i)
  const previousReleaseLineIndex = findIndexOfFirstMatchingLine(changelogLines, /^#+\s+\d+\.\d+\.\d+\s*$/i)
  const firstFixes = findIndexOfFirstMatchingLine(changelogLines, /^#+\s+Fixes\s*$/i)
  const firstImprovements = findIndexOfFirstMatchingLine(changelogLines, /^#+\s+Improvements\s*$/i)
  const firstNewFeatures = findIndexOfFirstMatchingLine(changelogLines, /^#+\s+New Features\s*$/i)
  const firstBreakingChanges = findIndexOfFirstMatchingLine(changelogLines, /^#+\s+Breaking changes\s*$/i)

  let releaseType

  if (firstBreakingChanges > unreleasedLineIndex && firstBreakingChanges < previousReleaseLineIndex) {
    releaseType = 'major'
  } else if (firstNewFeatures > unreleasedLineIndex && firstNewFeatures < previousReleaseLineIndex) {
    releaseType = 'minor'
  } else if (firstFixes > unreleasedLineIndex && firstFixes < previousReleaseLineIndex) {
    releaseType = 'patch'
  } else if (firstImprovements > unreleasedLineIndex && firstImprovements < previousReleaseLineIndex) {
    releaseType = 'patch'
  }

  if (!releaseType) {
    console.error('No changes were detected, cannot continue with release.')
    process.exit(13)
  }

  const newVersion = await getNewVersionName(releaseType, kitDir)

  console.log('new version', newVersion)

  const newChangelogLines = [].concat(changelogLines)
  newChangelogLines.splice(unreleasedLineIndex + 1, 0, '', `## ${newVersion}`)

  await fsp.writeFile(changelogPath, newChangelogLines.join('\n'))

  const partialChangelog = changelogLines
    .slice(unreleasedLineIndex + 1, previousReleaseLineIndex - 1)
    .filter((value, index, arr) => {
      if (value !== '') {
        return true
      }
      if (arr[index + 1].startsWith('#') || (index > 0 && arr[index - 1].startsWith('#'))) {
        return true
      }
      return false
    })

  const branchName = `release-${newVersion}`

  await execAndPrintStdout(`git checkout -b ${branchName}`, standardExecOptions)

  await execAndPrintStdout(`git commit -am "Preparing for release ${newVersion}."`, standardExecOptions)

  if (isDryRun) {
    console.log('Dry run, skipping push and release.')
    return
  }

  await execAndPrintStdout(`git push -u origin ${branchName}`, standardExecOptions)

  const prBodyFile = path.join(kitDir, '..', '.git-pr-body')
  await fsp.writeFile(prBodyFile, partialChangelog.join('\n'))

  let loggedInAsCorrectNpmUser = false
  const correctNpmUser = 'nowprototypeit'

  do {
    await sleep(2000)
    let output = ''
    try {
      output = await execAndCaptureStdout('npm whoami', { allowStderr: true, allowErrorCode: true, hideStd: true })
    } catch (e) {}
    if ((output || '').trim() === correctNpmUser) {
      loggedInAsCorrectNpmUser = true
    } else if (output) {
      console.log(`Currently logged in as [${output}], should be logged in as [${correctNpmUser}].  Run [npm login] in another terminal.`)
    } else {
      console.log(`Please log in as [${correctNpmUser}] to continue by running [npm login] in another terminal.`)
    }
  } while (!loggedInAsCorrectNpmUser)

  await execWithStdio(`npm publish${isRc ? ' --tag snapshot' : ''}`, standardExecOptions)

  if (isRc) {
    console.log('Release candidate published, skipping release.')
    return
  }
  await execAndPrintStdout({
    command: 'gh',
    args: ['release', 'create', `v${newVersion}`, '--notes-file', prBodyFile, '--target', branchName, '--title', `v${newVersion}`, '--latest']
  }, standardExecOptions)

  await sleep(2000)

  await exec('git checkout main', standardExecOptions)
  await exec(`git checkout -b post-${branchName}`, standardExecOptions)
  await exec(`git cherry-pick ${branchName}`, standardExecOptions)
  await exec(`git push -u origin post-${branchName}`, standardExecOptions)

  await sleep(2000)

  await execAndPrintStdout({
    command: 'gh',
    args: ['pr', 'create', '--base', 'main', '--head', `post-${branchName}`, '--title', `Post release ${newVersion}.`, '--body', 'Post release PR.']
  })

  await exec(`git push origin :${branchName}`, standardExecOptions)
}

async function checkForUnpublishedDependencies (kitDir) {
  const packageJson = JSON.parse(await fsp.readFile(path.join(kitDir, 'package.json'), 'utf8'))
  const dependencies = Object.assign({}, packageJson.devDependencies, packageJson.dependencies)
  const unpublishedDependencies = Object.keys(dependencies)
    .filter(x => dependencies[x].startsWith('file:') || dependencies[x].startsWith('github:'))
    .map(x => x + ' -> ' + dependencies[x])
  if (unpublishedDependencies.length > 0) {
    console.error('Unpublished dependencies detected, cancelling release.', unpublishedDependencies)
    process.exit(11)
  }
  console.log('No unpublished dependencies detected, continuing.')
}

async function checkForCorrectVersion (kitDir) {
  await execAndPrintStdout('npm run check:version', { cwd: kitDir })
}

async function getNewVersionName (releaseType, kitDir) {
  const name = await execAndCaptureStdout(`npm --no-git-tag-version version ${releaseType}`, { cwd: kitDir }).then(stdout => stdout.split('v')[1].trim())
  if (!isRc) {
    return name
  }
  const rcVersionWithoutNumber = `${name}-rc.`
  const existingVersions = await execAndCaptureStdout('npm view nowprototypeit versions json', { cwd: kitDir }).then(notQuiteJson => JSON.parse(notQuiteJson.replaceAll("'", '"')))
  const alreadyUsedNumbers = existingVersions.filter(x => x.startsWith(rcVersionWithoutNumber)).map(x => Number(x.replace(rcVersionWithoutNumber, ''))).filter(x => !isNaN(x))

  const maxAlreadyUsedNumber = alreadyUsedNumbers.reduce((acc, x) => Math.max(acc, x), 0)
  const fullVersion = rcVersionWithoutNumber + (maxAlreadyUsedNumber + 1)
  return await execAndCaptureStdout(`npm --no-git-tag-version version ${fullVersion}`, { cwd: kitDir }).then(stdout => stdout.split('v')[1].trim())
}
