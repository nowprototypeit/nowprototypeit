#!/usr/bin/env node
const startTime = Date.now()
global.logTimeFromStart = process.env.LOG_SERVE_PREBUILT_PERFORMANCE === 'true'
  ? function (message) {
    const time = Date.now() - startTime
    console.log(`[perf] [${time}]ms [${message}]`)
  }
  : () => {}

if (process.argv.indexOf('--suppress-node-version-warning') === -1 || (process.argv[2] === 'migrate' && process.argv[3] === '--')) {
  const majorNodeVersion = parseInt(process.version.split('.')[0].substring(1), 10)
  const versionIsWithinRecommendation = [16, 18, 20].includes(majorNodeVersion)
  if (!versionIsWithinRecommendation) {
    const nodeVersionIsTooOldToUse = majorNodeVersion < 14
    const updateOrDownload = majorNodeVersion < 20 ? 'update to' : 'download'
    const printLn = nodeVersionIsTooOldToUse ? console.error.bind(console) : console.warn.bind(console)
    const additionalText = nodeVersionIsTooOldToUse ? '' : ' Some features may not work with your version.'

    printLn('\nYou\'re using Node', process.version)
    printLn('The Now Prototype It Kit only supports Node v16, v18 and v20.' + additionalText + '\n')
    printLn('You can', updateOrDownload, 'Node v20 at https://nodejs.org/en/download\n')

    if (nodeVersionIsTooOldToUse) {
      process.exit(0)
    }
  }
}

if (process.argv[2] === 'serve-pre-built') {
  global.logTimeFromStart('Detected pre-built')
  console.log('Starting server with pre-built assets')
  global.runningOnServerWatchNotNeeded = true
  process.env.NODE_ENV = process.env.NODE_ENV || 'production'
  require('../listen-on-port')
} else {
  require('./utils/main-cli')
}
