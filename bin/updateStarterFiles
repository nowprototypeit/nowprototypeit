#!/usr/bin/env node

const path = require('path')
const fse = require('fs-extra')
const fsp = require('fs').promises
const { recursiveDirectoryContentsSync } = require('../lib/utils')
const { parse } = require('./utils/argv-parser')
const { packageJsonFormat } = require('./utils')
const kitVersion = require('../package.json').version

const gitignore = `
# Node.js ignores
node_modules/

# Prototype ignores - per-user
.tmp/
.env
migrate.log
usage-data-config.json

# General ignores
.DS_Store
.idea
`.trimStart()

const npmrc = `
audit=false
loglevel=error
`.trimStart()

const packageJson = {
  scripts: {
    dev: 'nowprototypeit dev || npx -y nowprototypeit@latest validate-kit dev $?',
    serve: 'nowprototypeit serve || npx -y nowprototypeit@latest validate-kit serve $?',
    start: 'nowprototypeit start || npx -y nowprototypeit@latest validate-kit start $?'

  }
}

const installDirectory = process.cwd()

;(async () => {
  async function updatePackageJson (packageJsonPath) {
    let newPackageJson = Object.assign({}, packageJson)
    newPackageJson = Object.assign(newPackageJson, await fse.readJson(packageJsonPath))
    await fse.writeJson(packageJsonPath, newPackageJson, packageJsonFormat)
  }

  async function addToConfigFile (key, value) {
    const configFileLocation = path.join(installDirectory, 'app', 'config.json')
    const config = await fse.readJson(configFileLocation)
    config[key] = value
    await fse.writeJson(configFileLocation, config, { spaces: 2 })
  }

  await Promise.all([
    fse.writeFile(path.join(installDirectory, '.gitignore'), gitignore, 'utf8'),
    fse.writeFile(path.join(installDirectory, '.npmrc'), npmrc, 'utf8'),
    fse.copy(path.join(__dirname, '..', 'LICENCE.txt'), path.join(installDirectory, 'LICENCE.txt')),
    updatePackageJson(path.join(installDirectory, 'package.json'))
  ])

  await Promise.all(recursiveDirectoryContentsSync(installDirectory)
    .filter(x => x.startsWith('app' + path.sep))
    .map(async (filePath) => {
      const fileContents = await fsp.readFile(path.join(installDirectory, filePath), 'utf8')
      if (fileContents.includes('__VERSION__')) {
        await fsp.writeFile(path.join(installDirectory, filePath), fileContents.replace(/__VERSION__/g, kitVersion), 'utf8')
      }
    }))
})()
